apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'pkg-debian'

idea {
    module {
        name='navigation-microservice'
    }
}

mainClassName = "io.github.zutherb.appstash.shop.service.navigation.AppServer"

applicationDefaultJvmArgs = [
    "-Drestx.mode=prod",
    "-Drestx.web-inf.location=../webapp/WEB-INF/web.xml",
    "-Drestx.web-app.location=../webapp",
    "-Drestx.http.XForwardedSupport=all",
    "-Dmongo.uri=mongodb://mongodb-node",
    "-Dmongo.db=shop",
    "-Dlogs.base=../logs",
]

sourceSets {
    main {
        resources {
            srcDir 'src/main/java'
            srcDir 'src/main/resources'
        }
    }
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

dependencies {
    //please extract version numbers and don't forget main gradle
    compile commonDeps

    compile "io.restx:restx-core:$restxVersion"
    compile "io.restx:restx-core-annotation-processor:$restxVersion"
    compile "io.restx:restx-factory:$restxVersion"
    compile "io.restx:restx-jongo:$restxVersion"
    compile "io.restx:restx-factory-admin:$restxVersion"
    compile "io.restx:restx-monitor-admin:$restxVersion"
    compile "io.restx:restx-server-jetty:$restxVersion"
    compile "io.restx:restx-apidocs:$restxVersion"
    compile "io.restx:restx-specs-admin:$restxVersion"

    testCompile "io.restx:restx-specs-tests:$restxVersion"
    testCompile "io.restx:restx-jongo-specs-tests:$restxVersion"
    testCompile testDeps
}

applicationDistribution.from("src/main/webapp") {
    into "webapp"
}

def debName = "navigation"
debian {
    packagename = "navigation-service"
    publications = ['mavenStuff']
    controlDirectory = "${projectDir}/debian/control"
    changelogFile = "${projectDir}/debian/changelog"
    outputFile = "${buildDir}/debian/${debName}_${version}.deb"

    data {
        dir {
            name = "${projectDir}/debian/data"
            exclusions = ["**/.DS_Store", "changelog"]
        }
        dir {
            name = "${buildDir}/debian-data/"
            exclusions = ["**/.DS_Store"]
        }
    }
}

task prepareDeb {
    dependsOn installApp

    copy {
        from "${buildDir}/install/"
        into "${buildDir}/debian-data/usr/share/shop/"
    }
}

jar {
    baseName = "navigation-microservice"
    def manifestClasspath = configurations.compile.collect { it.getName() }.join(',')
    def cmd = "git rev-parse HEAD"
    def proc = cmd.execute()
    manifest {
        attributes("Manifest-Version"       : "1.0",
                "Created-By"             : vendor,
                "Specification-Title"    : appName,
                "Specification-Version"  : version,
                "Specification-Vendor"   : vendor,
                "Implementation-Title"   : appName,
                "Implementation-Version" : version,
                "Implementation-Vendor"  : vendor,
                "Git-Revision"           : proc.text.trim(),
                "Build"                  : "${System.getenv("JOB_NAME")}",
                "Build-Number"           : "${System.getenv("BUILD_NUMBER")}",
                "Class-Path"             : manifestClasspath)
    }
}

distDocker {
    dependsOn build

    applicationName = 'navigation-service'
    tagVersion = "latest"
    tag = "zutherb/${applicationName}"

    workingDir "/navigation-0.6/bin"

    exposePort 18090
}